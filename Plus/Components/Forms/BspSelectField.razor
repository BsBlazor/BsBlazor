@namespace BsBlazor.Plus
@using BlazorDevKit
@using BsBlazor.Helpers
@using System.Linq.Expressions
@using Microsoft.AspNetCore.Components.Forms
@using System.Globalization
@typeparam TValue
@inherits BspInputFieldBase<TValue>
<BspField Context="field"
          Id="@Id"
          Label="@Label"
          Class="@Class"
          Style="@Style"
          AdditionalAttributes="AdditionalAttributes"
          ShowLabel="ShowLabel" ValueExpression="ValueExpression">
    <InputSelect @ref="_select"
                 Value="@Value"
                 ValueChanged="ValueChanged"
                 ValueExpression="ValueExpression!"
                 Immediate="Immediate"
                 class="@field.GetValidatableControlClass(InputCss)"
                 disabled="@Disabled"
                 readonly="@ReadOnly"
                 required="@Required"
                 autofocus="@AutoFocus"
                 id="@field.Id" placeholder="@Placeholder">
        @ChildContent
    </InputSelect>
</BspField>
@code {
    private InputSelect<TValue?> _select = default!;
    private string InputCss => CssBuilder.Default("form-select")
         .AddClass("form-select-sm", Size == BsFormControlSize.Small)
         .AddClass("form-select-lg", Size == BsFormControlSize.Large)
         .Build();
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    public override ValueTask FocusAsync() => _select.Element!.Value.FocusAsync();
}
