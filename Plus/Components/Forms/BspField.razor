@namespace BsBlazor.Plus
@using BsBlazor.Helpers
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq.Expressions
@typeparam TValue
@inherits BsComponentBase
<div class="@CssClass" style="@Style" @attributes="AdditionalAttributes">
    @if (ShowLabel)
    {
        <label for="@_context.Id" class="@LabelCssClass">@Label @(ShowRequiredMark ? "*" : "")</label>
    }
    @ChildContent?.Invoke(_context)
    @if(EditContext != null && ValueExpression != null)
    {
        <ValidationMessage class="invalid-feedback d-block" For="@ValueExpression" />
    }
</div>
@code {
    private BspFieldContext<TValue> _context = default!;
    private static int _instanceCount;
    private bool ShowRequiredMark => RequiredMark == BspFieldRequiredMark.Always 
                                     || (RequiredMark == BspFieldRequiredMark.Auto && EditContext?.IsRequired(ValueExpression) == true);
    [Parameter] public string? Id { get; set; }
    [Parameter] public BspFieldRequiredMark RequiredMark { get; set; } = BspFieldRequiredMark.Auto;
    [Parameter] public bool ShowLabel { get; set; } = true;
    [Parameter] public string? Label { get; set; }
    [Parameter] public RenderFragment<BspFieldContext<TValue>>? ChildContent { get; set; }
    [Parameter] public required Expression<Func<TValue>>? ValueExpression { get; set; }
    [CascadingParameter] private EditContext? EditContext { get; set; }
    [CascadingParameter] private BspFieldGroup? FieldGroup { get; set; }


    protected override void OnParametersSet()
    {
        _context = new BspFieldContext<TValue>(Id, EditContext, ValueExpression, FieldGroup);
    }

    protected string CssClass => CssBuilder.Empty().AddClass(Class).Build();
    private string LabelCssClass => CssBuilder.Default("form-label")
       .AddClass("text-danger", EditContext != null 
                                && ValueExpression != null 
                                && !EditContext.IsValid(FieldIdentifier.Create(ValueExpression))).Build();
}
