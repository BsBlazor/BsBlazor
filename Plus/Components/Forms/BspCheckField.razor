@namespace BsBlazor.Plus
@using BsBlazor.Helpers
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq.Expressions
@inherits BsComponentWithContentBase
<div>
    <div class="@CssClass">
        <InputCheckbox id="@_computedId"
        class="@CheckCss"
        disabled="@Disabled"
        Value="Value"
        ValueChanged="ValueChanged"
        ValueExpression="ValueExpression" />
        <label class="form-check-label" for="@_computedId">
            @if (ChildContent != null)
            {
                @ChildContent
            }
            else
            {
                @Label
            }
        </label>
    </div>
    @if (EditContext != null)
    {
        <ValidationMessage class="invalid-feedback d-block" For="@ValueExpression" />
    }
</div>
@code {
    private string _computedId = string.Empty;
    private string CssClass => CssBuilder.Default("form-check")
       .AddClass(Class)
       .Build();
    private string CheckCss => CssBuilder.Default("form-check-input")
      .AddClass("is-invalid", EditContext != null && !EditContext.IsValid(FieldIdentifier.Create(ValueExpression!)))
      .Build();
    [CascadingParameter] private EditContext? EditContext { get; set; }
    [CascadingParameter] private BspFieldGroup? FieldGroup { get; set; }
    [Parameter] public string? Id { get; set; }
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public bool Value { get; set; }
    [Parameter] public EventCallback<bool> ValueChanged { get; set; }
    [Parameter] public Expression<Func<bool>>? ValueExpression { get; set; }
    [Parameter] public bool Disabled { get; set; }
    protected override void OnParametersSet()
    {
        _computedId = BspFieldUtils.ComputeId(Id, ValueExpression != null ? FieldIdentifier.Create(ValueExpression) : null, FieldGroup);
    }
} 