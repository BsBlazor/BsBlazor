@namespace BsBlazor.Plus
@using BlazorDevKit
@using BsBlazor.Helpers
@using System.Linq.Expressions
@using Microsoft.AspNetCore.Components.Forms
@using System.Globalization
@typeparam TValue
@inherits BspInputFieldBase<TValue>
<BspField Context="field"
          Id="Id"
          Label="@Label"
          Class="@Class"
          Style="@Style"
          AdditionalAttributes="AdditionalAttributes"
          ShowLabel="ShowLabel" ValueExpression="ValueExpression">
    <BdkInputNumber @ref="_input"
                    Value="@Value"
                    ValueChanged="ValueChanged"
                    ValueExpression="ValueExpression!"
                    Immediate="Immediate"
                    class="@field.GetValidatableControlClass(InputCss)"
                    disabled="@Disabled"
                    readonly="@ReadOnly"
                    required="@Required"
                    autofocus="@AutoFocus"
                    id="@Id" placeholder="@Placeholder"
                    min="@(Min?.ToString(CultureInfo.InvariantCulture))"
                    max="@(Max?.ToString(CultureInfo.InvariantCulture))"
                    step="@(Step?.ToString(CultureInfo.InvariantCulture))" />
</BspField>
@code {
    private BdkInputNumber<TValue?> _input = default!;
    private string InputCss => CssBuilder.Default("form-control")
         .AddClass("form-control-sm", Size == BsFormControlSize.Small)
         .AddClass("form-control-lg", Size == BsFormControlSize.Large)
         .Build();
    [Parameter] public decimal? Step { get; set; } = 1;
    [Parameter] public decimal? Min { get; set; }
    [Parameter] public decimal? Max { get; set; }
    public override ValueTask FocusAsync() => _input.Element!.Value.FocusAsync();
}
