@using System.Linq.Expressions
@namespace BsBlazor.Plus
@inject IJSRuntime JS
@typeparam TValue
@typeparam TItem
<BspField Label="@Label" ValueExpression="ValueExpression" Context="field">
    <div class="dropdown" @onshow.bs.dropdown="OnShow">
        <div @ref="_bsDropdownToggleElement" data-bs-toggle="dropdown" data-bs-auto-close="outside">
            <button @onkeydown="OnControlKeyDown"
                    class="@field.GetValidatableControlClass("form-select") text-start d-flex flex-wrap gap-2 align-items-center">
                <wbr /> @* zero width char, to fix the height *@
                @if (Value == null || Value.Length == 0)
                {

                    <span class="text-muted">
                        @Placeholder
                    </span>
                }
                else
                {
                    @foreach (var item in GetCurrentItems())
                    {
                        <span class="badge text-bg-secondary me-1 mw-100 text-truncate">@item.Label</span>
                    }
                }

            </button>
        </div>
        <div class="dropdown-menu w-100">
            <div class="d-flex flex-column" style="max-height: @MaxHeight">
                <div>
                    <div class="dropdown-item bg-body" tabindex="0" @onfocus="@(() => _inputJs.InvokeVoidAsync("focus"))">
                        <div class="d-flex align-items-center">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" style="width: 24px">
                                <path d="M18.031 16.6168L22.3137 20.8995L20.8995 22.3137L16.6168 18.031C15.0769 19.263 13.124 20 11 20C6.032 20 2 15.968 2 11C2 6.032 6.032 2 11 2C15.968 2 20 6.032 20 11C20 13.124 19.263 15.0769 18.031 16.6168ZM16.0247 15.8748C17.2475 14.6146 18 12.8956 18 11C18 7.1325 14.8675 4 11 4C7.1325 4 4 7.1325 4 11C4 14.8675 7.1325 18 11 18C12.8956 18 14.6146 17.2475 15.8748 16.0247L16.0247 15.8748Z"></path>
                            </svg>
                            <input class="form-control form-control-sm border-0 flex-grow-1"
                                   @ref="_inputReference"
                                   @onkeydown="OnInputKeyDown"
                                   @onkeydown:preventDefault="_lastKeyWasArrowDown"
                                   @onkeydown:stopPropagation="true"
                                   @bind="_searchTerm"
                                   @bind:event="oninput"
                                   @bind:after="() => Debounce(SearchAsync, 300)" />
                        </div>
                        <hr class="dropdown-divider">

                    </div>
                </div>
                <div class="overflow-y-auto d-flex flex-column p-2">
                    @for (int i = 0; i < _items.Length; i++)
                    {
                        var item = _items[i];
                        @if (i == 0)
                        {
                            <button type="button" tabindex="0" @ref="_firstItem"
                                    class="dropdown-item form-check ps-4"
                                    @onclick="() => SelectAsync(item)">
                                <input checked="@IsSelected(item)" class="form-check-input" style="pointer-events: none" type="checkbox" />
                                <div class="form-check-label">
                                    @TextAccessor(item)
                                </div>
                            </button>
                        }
                        else
                        {
                            <button type="button" tabindex="0" class="dropdown-item form-check ps-4"
                                    @onclick="() => SelectAsync(item)">
                                <input checked="@IsSelected(item)" class="form-check-input" style="pointer-events: none" type="checkbox" />
                                <div class="form-check-label">
                                    @TextAccessor(item)
                                </div>
                            </button>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</BspField>

