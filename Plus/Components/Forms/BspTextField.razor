@namespace BsBlazor.Plus
@using BlazorDevKit
@using BsBlazor.Helpers
@using System.Linq.Expressions
@using BsBlazor.Plus.Components.Forms
@using Microsoft.AspNetCore.Components.Forms
@inherits BspInputFieldBase<string>
<div class="@CssClass">
    @RenderLabel()
    <BdkInputText @ref="_input"
                  Value="@Value"
                  ValueChanged="ValueChanged"
                  ValueExpression="ValueExpression"
                  Immediate="Immediate"
                  class="@InputCss"
                  disabled="@Disabled"
                  readonly="@ReadOnly"
                  required="@Required"
                  autofocus="@AutoFocus"
                  id="@Id" type="@InputType" placeholder="@Placeholder"/>
    @RenderValidation()
</div>
@code {
    private BdkInputText _input = default!;
    private string InputCss => CssBuilder.Default("form-control")
         .AddClass("form-control-color", Type is BsInputType.Color)
         .AddClass("is-invalid", EditContext != null && !EditContext.IsValid(FieldIdentifier.Create(ValueExpression!)))
         .Build();
    [Parameter] public BsInputType Type { get; set; } = BsInputType.Text;

    private string InputType => Type switch
    {
        BsInputType.Text => "text",
        BsInputType.Password => "password",
        BsInputType.Email => "email",
        BsInputType.Number => "number",
        BsInputType.Tel => "tel",
        BsInputType.Url => "url",
        BsInputType.Range => "range",
        BsInputType.Date => "date",
        BsInputType.Time => "time",
        BsInputType.DateTimeLocal => "datetime-local",
        BsInputType.Month => "month",
        BsInputType.Week => "week",
        BsInputType.Color => "color",
        _ => "text"
    };
    public override ValueTask FocusAsync() => _input.Element!.Value.FocusAsync();
}
