@inject  IToastService ToastService

<div class="d-flex flex-wrap" style="gap: 10px;">
    <BsButton Variant="BsButtonVariant.Primary" Type="BsButtonType.Button"
              OnClick="@(() => ToastService.ShowAsync("Hi, I am a toast body"))">
        Show simple standalone Toast
    </BsButton>

    <BsButton Variant="BsButtonVariant.Primary" Type="BsButtonType.Button"
              OnClick="@(() => ToastService.ShowAsync("Hi, I am a toast body", "Hi, I am a toast header"))">
        Show standalone Toast with title
    </BsButton>

    <BsButton Variant="BsButtonVariant.Primary" Type="BsButtonType.Button"
              OnClick="@(() => ToastService.ShowAsync("Hi, I am a toast body", "Hi, I am a toast header", _options))">
        Show standalone Toast with title and options
    </BsButton>

    <BsButton Variant="BsButtonVariant.Primary" Type="BsButtonType.Button" OnClick="ShowToastAsync">
        Show simple standalone toast + ToastReference
    </BsButton>
</div>

@code 
{
    private ToastOptions _options = new ()
    {
        Class = Bs.Css.TextBackgroundPrimary,
        Delay = 4000
    };
    
    private async Task ShowToastAsync()
    {
        var options = new ToastOptions
        {
            Color = BsToastColor.Secondary,
            Delay = 30000
        };
        
        var toastRef = await ToastService.ShowAsync("Notification in progress...", options: options);
        
        await toastRef.WaitClosedAsync();

        await ToastService.ShowAsync("Notification completed!");
    }
}