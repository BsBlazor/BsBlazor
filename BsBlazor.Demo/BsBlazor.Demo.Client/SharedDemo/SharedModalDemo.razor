@using System.Text
<h3>Static modal example</h3>
<BsModal Class="position-static d-block" Fade="false">
    <ModalHeader>
        <BsModalTitle>Modal title</BsModalTitle>
        <BsModalCloseButton />
    </ModalHeader>
    <ChildContent>
        Modal body text goes here.
    </ChildContent>
    <ModalFooter>
        <BsButton Variant="BsButtonVariant.Secondary" Dismiss="BsButtonDismiss.Modal">Close</BsButton>
        <BsButton Variant="BsButtonVariant.Primary">Save Changes</BsButton>
    </ModalFooter>
</BsModal>
<hr />
<h3>Live demo</h3>
<BsButton Variant="BsButtonVariant.Primary" Toggle="BsButtonTogle.Modal" Target="#exampleModal">Launch demo modal</BsButton>
<BsModal Id="exampleModal"
         aria-labelledby="exampleModalLabel"
         OnShow="@(() => _sb1.AppendLine("Show"))"
         OnShown="@(() => _sb1.AppendLine("Shown"))"
         OnHide="@(() => _sb1.AppendLine("Hide"))"
         OnHidePrevented="@(() => _sb1.AppendLine("HidePrevented"))"
         OnHidden="@(() => _sb1.AppendLine("Hidden"))">
    <ModalHeader>
        <BsModalTitle id="exampleModalLabel">Modal title</BsModalTitle>
        <BsModalCloseButton />
    </ModalHeader>
    <ChildContent>
        ...
    </ChildContent>
    <ModalFooter>
        <BsButton Variant="BsButtonVariant.Secondary" Dismiss="BsButtonDismiss.Modal">Close</BsButton>
        <BsButton Variant="BsButtonVariant.Primary">Save Changes</BsButton>
    </ModalFooter>
</BsModal>
<div class="mt-4">Events detected by Blazor interactivity:</div>
<div style="height: 50px; overflow-y: auto; border: 1px solid black">@_sb1</div>
<hr />
<h3>Static backdrop</h3>
<BsButton Variant="BsButtonVariant.Primary" 
          Toggle="BsButtonTogle.Modal" 
          Target="#staticBackdrop">Launch static backdrop modal</BsButton>
<BsModal Id="staticBackdrop"
         Backdrop="BsModalBackdrop.Static"
         Keyboard="false"
         aria-labelledby="staticBackdropLabel"
         OnShow="@(() => _sb2.AppendLine("Show"))"
         OnShown="@(() => _sb2.AppendLine("Shown"))"
         OnHide="@(() => _sb2.AppendLine("Hide"))"
         OnHidePrevented="@(() => _sb2.AppendLine("HidePrevented"))"
         OnHidden="@(() => _sb2.AppendLine("Hidden"))">
    <ModalHeader>
        <BsModalTitle id="staticBackdropLabel">Modal title</BsModalTitle>
        <BsModalCloseButton />
    </ModalHeader>
    <ChildContent>
        ...
    </ChildContent>
    <ModalFooter>
        <BsButton Variant="BsButtonVariant.Secondary" Dismiss="BsButtonDismiss.Modal">Close</BsButton>
        <BsButton Variant="BsButtonVariant.Primary">Understood</BsButton>
    </ModalFooter>
</BsModal>
<div class="mt-4">Events detected by Blazor interactivity:</div>
<div style="height: 50px; overflow-y: auto; border: 1px solid black">@_sb2</div>
<hr />
<h3>Scrolling long content</h3>
<p>
    When modals become too long for the user’s viewport or device, they scroll independent of the page itself. Try the demo below to see what we mean.
</p>
<BsButton Variant="BsButtonVariant.Primary" Toggle="BsButtonTogle.Modal" Target="#scrollingModal">Launch demo modal</BsButton>
<BsModal Id="scrollingModal">
    <ModalHeader>
        <BsModalTitle>Modal title</BsModalTitle>
        <BsModalCloseButton />
    </ModalHeader>
    <ChildContent>
        <p style="min-height: 1500px">This is some placeholder content to show the scrolling behavior for modals. Instead of repeating the text in the modal, we use an inline style to set a minimum height, thereby extending the length of the overall modal and demonstrating the overflow scrolling. When content becomes longer than the height of the viewport, scrolling will move the modal as needed.</p>
    </ChildContent>
    <ModalFooter>
        <BsButton Variant="BsButtonVariant.Secondary" Dismiss="BsButtonDismiss.Modal">Close</BsButton>
        <BsButton Variant="BsButtonVariant.Primary">Save Changes</BsButton>
    </ModalFooter>
</BsModal>
<p class="mt-4">
    You can also create a scrollable modal that allows scrolling the modal body by adding Scrollable parameter
</p>
<BsButton Variant="BsButtonVariant.Primary" Toggle="BsButtonTogle.Modal" Target="#scrollableModal">Launch demo modal</BsButton>
<BsModal Id="scrollableModal" Scrollable>
    <ModalHeader>
        <BsModalTitle>Modal title</BsModalTitle>
        <BsModalCloseButton />
    </ModalHeader>
    <ChildContent>
        <p style="min-height: 1500px">This is some placeholder content to show the scrolling behavior for modals. Instead of repeating the text in the modal, we use an inline style to set a minimum height, thereby extending the length of the overall modal and demonstrating the overflow scrolling. When content becomes longer than the height of the viewport, scrolling will move the modal as needed.</p>
    </ChildContent>
    <ModalFooter>
        <BsButton Variant="BsButtonVariant.Secondary" Dismiss="BsButtonDismiss.Modal">Close</BsButton>
        <BsButton Variant="BsButtonVariant.Primary">Save Changes</BsButton>
    </ModalFooter>
</BsModal>
<hr />
<h3>Vertically centered</h3>
@code {
    private StringBuilder _sb1 = new();
    private StringBuilder _sb2 = new();
}
