@using BsBlazor
<div @ref="_elementReference" 
    class="modal @(Fade ? "fade" : "") @Class"
    @onhide.bs.modal="() => OnHide.InvokeAsync()"
    @onhidden.bs.modal="() => OnHidden.InvokeAsync()"
    @onhidePrevented.bs.modal="() => OnHidePrevented.InvokeAsync()"
    @onshow.bs.modal="() => OnShow.InvokeAsync()"
    @onshown.bs.modal="() => OnShown.InvokeAsync()"
    tabindex="-1" 
    aria-hidden="true"
    @attributes="_additionalAttributes">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                @ModalHeader
            </div>
            <div class="modal-body">
                @ChildContent
            </div>
            <div class="modal-footer">
                @ModalFooter
            </div>
        </div>
    </div>
</div>
@code {
    private Dictionary<string, object> _additionalAttributes = [];
    private ElementReference _elementReference;

    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public string Title { get; set; } = "";

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public bool Fade { get; set; } = true;

    [Parameter]
    public bool Keyboard { get; set; } = true;

    [Parameter]
    public BsModalBackdrop Backdrop { get; set; } = BsModalBackdrop.True;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public RenderFragment? ModalHeader { get; set; }

    [Parameter]
    public RenderFragment? ModalFooter { get; set; }

    [Parameter]
    public EventCallback OnHide { get; set; }

    [Parameter]
    public EventCallback OnHidePrevented { get; set; }

    [Parameter]
    public EventCallback OnHidden { get; set; }

    [Parameter]
    public EventCallback OnShow { get; set; }

    [Parameter]
    public EventCallback OnShown { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; } = new();

    protected override void OnParametersSet()
    {
        _additionalAttributes = new Dictionary<string, object>(AdditionalAttributes.ToList());
        if (Id != null)
        {
            _additionalAttributes["id"] = Id;
        }
        _additionalAttributes["data-bs-backdrop"] = Backdrop.ToString().ToLower();
        _additionalAttributes["data-bs-keyboard"] = Keyboard.ToString().ToLower();
    }
}
