@namespace BsBlazor
@inherits BsComponentBase
@implements IAsyncDisposable
@inject IJSRuntime JS

<div
    id="@_id"
    @ref="_elementReference"
    @onhide.bs.toast="() => OnHide.InvokeAsync()"
    @onhidden.bs.toast="() => OnHidden.InvokeAsync()"
    @onshow.bs.toast="() => OnShow.InvokeAsync()"
    @onshown.bs.toast="() => OnShown.InvokeAsync()"
    class="@CssClass"
    role="alert"
    aria-live="assertive"
    aria-atomic="true"
    @attributes="AdditionalAttributes">
    @ChildContent
</div>

@code
{
    private string _id = Guid.NewGuid().ToString("N");
    private ElementReference _elementReference;
    private IJSObjectReference _jsInstance = default!;

    private string CssClass => CssBuilder
        .Default("toast")
        .AddBsClass(bs => bs.TextBgPrimary, Color is BsToastColor.Primary)
        .AddBsClass(bs => bs.TextBgSecondary, Color is BsToastColor.Secondary)
        .AddBsClass(bs => bs.TextBgSuccess, Color is BsToastColor.Success)
        .AddBsClass(bs => bs.TextBgDanger, Color is BsToastColor.Danger)
        .AddBsClass(bs => bs.TextBgWarning, Color is BsToastColor.Warning)
        .AddBsClass(bs => bs.TextBgInfo, Color is BsToastColor.Info)
        .AddBsClass(bs => bs.TextBgLight, Color is BsToastColor.Light)
        .AddBsClass(bs => bs.TextBgDark, Color is BsToastColor.Dark)
        .AddClass(Class)
        .Build();

    [Parameter] [EditorRequired] public required RenderFragment ChildContent { get; set; }

    [Parameter] public bool Animation { get; set; } = true;
    [Parameter] public bool AutoHide { get; set; } = true;
    [Parameter] public int Delay { get; set; } = 5000;
    [Parameter] public BsToastColor? Color { get; set; }
    
    [Parameter] public bool ShowWhenRendered { get; set; }

    [Parameter] public EventCallback OnHide { get; set; }

    [Parameter] public EventCallback OnHidden { get; set; }

    [Parameter] public EventCallback OnShow { get; set; }

    [Parameter] public EventCallback OnShown { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsInstance = await JS.InvokeAsync<IJSObjectReference>("bootstrap.Toast.getOrCreateInstance", _elementReference);
            if (ShowWhenRendered)
            {
                await ShowAsync();
            }
        }
    }

    protected override void OnParametersSet()
    {
        AdditionalAttributes["data-bs-autohide"] = AutoHide.ToString().ToLower();
        AdditionalAttributes["data-bs-delay"] = Delay.ToString();
        AdditionalAttributes["data-bs-animation"] = Animation.ToString().ToLower();
    }

    public async Task ShowAsync() => await _jsInstance.InvokeVoidAsync("show");

    public async Task HideAsync() => await _jsInstance.InvokeVoidAsync("hide");

    public async Task<bool> IsShownAsync() => await _jsInstance.InvokeAsync<bool>("isShown");
    
    public async ValueTask DisposeAsync()
    {
        if (_jsInstance.IsNotNull())
        {
            await _jsInstance.InvokeVoidAsync("dispose");
            await _jsInstance.DisposeAsync();
        }
    }
}