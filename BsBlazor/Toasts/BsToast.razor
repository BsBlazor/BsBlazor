@namespace BsBlazor
@inherits BsComponentBase
@implements IAsyncDisposable
@inject IJSRuntime JS

<div
    id="@_id"
    @ref="_elementReference"
    @onhide.bs.toast="() => OnHide.InvokeAsync()"
    @onhidden.bs.toast="() => OnHidden.InvokeAsync()"
    @onshow.bs.toast="() => OnShow.InvokeAsync()"
    @onshown.bs.toast="() => OnShown.InvokeAsync()"
    class="@CssClass"
    role="alert"
    aria-live="assertive"
    aria-atomic="true"
    @attributes="AdditionalAttributes">
    @ChildContent
</div>

@code
{
    private string _id = Guid.NewGuid().ToString("N");
    private ElementReference _elementReference;
    private IJSObjectReference _jsInstance = default!;

    private string CssClass => CssBuilder
        .Default("toast")
        .AddClass("text-white bg-primary", Variant == BsToastVariant.Primary)
        .AddClass("text-white bg-secondary", Variant == BsToastVariant.Secondary)
        .AddClass("text-white bg-success", Variant == BsToastVariant.Success)
        .AddClass("text-white bg-danger", Variant == BsToastVariant.Danger)
        .AddClass("text-black bg-warning", Variant == BsToastVariant.Warning)
        .AddClass("text-black bg-info", Variant == BsToastVariant.Info)
        .AddClass("text-dark bg-light", Variant == BsToastVariant.Light)
        .AddClass("text-light bg-dark", Variant == BsToastVariant.Dark)
        .AddClass(Class)
        .Build();

    [Parameter] [EditorRequired] public required RenderFragment ChildContent { get; set; }

    [Parameter] public BsToastVariant Variant { get; set; } = BsToastVariant.Default;

    [Parameter] public EventCallback OnHide { get; set; }

    [Parameter] public EventCallback OnHidden { get; set; }

    [Parameter] public EventCallback OnShow { get; set; }

    [Parameter] public EventCallback OnShown { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsInstance = await JS.InvokeAsync<IJSObjectReference>("bootstrap.Toast.getOrCreateInstance", _elementReference);
        }
    }

    public async Task ShowAsync() => await _jsInstance.InvokeVoidAsync("show");

    public async Task HideAsync() => await _jsInstance.InvokeVoidAsync("hide");

    public async Task<bool> IsShownAsync() => await _jsInstance.InvokeAsync<bool>("isShown");

    public async ValueTask DisposeAsync()
    {
        if (_jsInstance.IsNotNull())
        {
            await _jsInstance.InvokeVoidAsync("dispose");
            await _jsInstance.DisposeAsync();
        }
    }
}