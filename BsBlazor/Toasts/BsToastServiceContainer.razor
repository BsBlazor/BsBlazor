@namespace BsBlazor
@inject IToastService ToastService
@using BsBlazor.Toasts
@inherits BsComponentBase

@if (ConcreteModalService is not null)
{
    <BsToastContainer Placement="Placement" Position="Position" Class="@Class" AdditionalAttributes="AdditionalAttributes" ZIndex="ZIndex" Style="@Style">
        @foreach (var reference in ConcreteModalService.ToastReferences.Where(tRef => tRef.Options.Placement is null || tRef.Options.Placement == Placement))
        {
            <BsToastReferenceItem Animation="Animation" AutoHide="AutoHide" Color="Color" Delay="Delay" Reference="reference"/>
        }
    </BsToastContainer>

    @foreach (var placement in Enum.GetValues<BsToastPlacement>().Where(placement => placement != Placement))
    {
        <BsToastContainer Placement="placement" Position="Position" Class="@Class" AdditionalAttributes="AdditionalAttributes" ZIndex="ZIndex" Style="@Style">
            @foreach (var reference in ConcreteModalService.ToastReferences.Where(tRef => tRef.Options.Placement == placement))
            {
                <BsToastReferenceItem Animation="Animation" AutoHide="AutoHide" Color="Color" Delay="Delay" Reference="reference"/>
            }
        </BsToastContainer>
    }
}

@code {
    private ToastService? ConcreteModalService => ToastService as ToastService;

    protected override void OnInitialized()
    {
        if (ConcreteModalService is null)
        {
            return;
        }

        ConcreteModalService.OnToastAdded += _ => StateHasChanged();
        ConcreteModalService.OnToastRemoved += _ => StateHasChanged();
    }

    [Parameter] public bool? Animation { get; set; }

    [Parameter] public bool? AutoHide { get; set; }

    [Parameter] public int? Delay { get; set; }

    [Parameter] public BsToastColor? Color { get; set; }
    
    [Parameter] public BsToastPlacement? Placement { get; set; }
    
    [Parameter] public BsToastPosition? Position { get; set; }
    [Parameter] public int ZIndex { get; set; } = 1090;

    protected override void OnParametersSet()
    {
        if (string.IsNullOrEmpty(Class) && Placement is null)
        {
            Placement = BsToastPlacement.TopRight;
        }
        
        if (string.IsNullOrEmpty(Class) && Position is null)
        {
            Position = BsToastPosition.Fixed;
        }
    }

}