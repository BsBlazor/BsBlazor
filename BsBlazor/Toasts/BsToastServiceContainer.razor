@namespace BsBlazor
@inject IToastService ToastService
@using BsBlazor.Toasts
@inherits BsComponentBase
@if (ConcreteModalService is not null)
{
    @foreach(var placement in _usedPlacements)
    {
        <BsToastContainer @key="@($"toast_service_{placement}")" Placement="placement" Position="Position" Class="@Class" AdditionalAttributes="AdditionalAttributes" ZIndex="ZIndex" Style="@Style">
            @foreach (var reference in GetToastsFor(placement))
            {
                <BsToastReferenceItem @key="reference" Animation="Animation" AutoHide="AutoHide" Color="Color" Delay="Delay" Reference="reference" />
            }
        </BsToastContainer>
    }
}
@code {
    private ToastService? ConcreteModalService => ToastService as ToastService;
    private HashSet<BsToastPlacement?> _usedPlacements = [];

    protected override void OnInitialized()
    {
        if (ConcreteModalService is null)
        {
            return;
        }

        ConcreteModalService.OnToastAdded += ToastAdded;
        ConcreteModalService.OnToastRemoved += ToastRemoved;
    }

    [Parameter] public bool? Animation { get; set; }

    [Parameter] public bool? AutoHide { get; set; }

    [Parameter] public int? Delay { get; set; }

    [Parameter] public BsToastColor? Color { get; set; }

    [Parameter] public BsToastPlacement? Placement { get; set; }

    [Parameter] public BsToastPosition? Position { get; set; }
    [Parameter] public int ZIndex { get; set; } = 1090;

    protected override void OnParametersSet()
    {
        if (string.IsNullOrEmpty(Class) && Placement is null)
        {
            Placement = BsToastPlacement.TopRight;
        }

        if (string.IsNullOrEmpty(Class) && Position is null)
        {
            Position = BsToastPosition.Fixed;
        }
    }

    private void ToastAdded(ToastReference toastReference)
    {
        _usedPlacements.Add(toastReference.Options.Placement);
        StateHasChanged();
    }

    private void ToastRemoved(ToastReference toastReference)
    {
        StateHasChanged();
    }

    private IEnumerable<ToastReference> GetToastsFor(BsToastPlacement? placement)
    {
        return ConcreteModalService!.ToastReferences
                                    .Where(tRef => tRef.Options.Placement == placement
                                                // default placement
                                                || tRef.Options.Placement == null && Placement == placement);
    }

}