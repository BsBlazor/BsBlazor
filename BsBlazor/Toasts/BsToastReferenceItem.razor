@using System.ComponentModel
@attribute [EditorBrowsable(EditorBrowsableState.Never)]

<BsToast
    @key="ToastReference"
    @ref="_toast"
    ShowWhenRendered
    OnHidden="ToastReference.InvokeHidden"
    Animation="ToastReference.Options.Animation ?? Animation ?? true"
    Delay="ToastReference.Options.Delay ?? Delay ?? 2000"
    AutoHide="ToastReference.Options.AutoHide ?? AutoHide ?? true"
    Color="ToastReference.Options.Color ?? Color"
    Class="@ToastReference.Options.Class">
    @{ ToastReference.Initialize(_toast); }
    <CascadingValue TValue="IToastReference" IsFixed Value="ToastReference">
        @ToastContentTemplate?.Invoke(new (){ Color = ToastReference.Options.Color, Message = ToastReference.Message, Title = ToastReference.Title })
        @if (ToastReference.ReferenceType is ToastReferenceType.Standalone)
        {
            @if (!string.IsNullOrEmpty(ToastReference.Title))
            {
                <BsToastHeader>
                    <strong class="me-auto">@ToastReference.Title</strong>
                    @if (ToastReference.Options.ShowCloseButtonIcon)
                    {
                        <BsToastCloseButton/>
                    }
                </BsToastHeader>
            }

            <BsToastBody>

                @if (string.IsNullOrEmpty(ToastReference.Title) && ToastReference.Options.ShowCloseButtonIcon)
                {
                    <div class="d-flex">
                        @ToastReference.Message
                        <BsToastCloseButton Class="me-2 m-auto"/>
                    </div>
                }
                else
                {
                    @ToastReference.Message
                }
            </BsToastBody>
        }

        @if (ToastReference.ReferenceType is ToastReferenceType.RenderFragment)
        {
            @ToastReference.RenderFragment
        }

        @if (ToastReference.ReferenceType is ToastReferenceType.ContextualRenderFragment && ToastReference.ContextualRenderFragment is not null)
        {
            @ToastReference.ContextualRenderFragment(ToastReference)
        }

        @if (ToastReference.ReferenceType is ToastReferenceType.Component && ToastReference.ToastContentType is not null)
        {
            <DynamicComponent Type="ToastReference.ToastContentType" Parameters="ToastReference.Parameters"/>
        }

    </CascadingValue>
</BsToast>

@code {

    private BsToast _toast = null!;
    private ToastReference ToastReference => (ToastReference)Reference;

    [Parameter] public required IToastReference Reference { get; set; }
    [Parameter] public bool? Animation { get; set; }
    [Parameter] public bool? AutoHide { get; set; }
    [Parameter] public int? Delay { get; set; }
    [Parameter] public BsToastColor? Color { get; set; }
    [Parameter] public RenderFragment<BsToastReferenceData>? ToastContentTemplate { get; set; }

}