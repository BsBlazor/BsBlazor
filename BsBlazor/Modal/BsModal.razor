@namespace BsBlazor
<BsModalRoot @ref="_modalRoot"
             Id="@Id"
             AdditionalAttributes="AdditionalAttributes"
             Fade="Fade"
             Backdrop="Backdrop"
             OnHide="OnHide"
             OnHidden="OnHidden"
             OnHidePrevented="OnHidePrevented"
             OnShow="OnShow"
             OnShown="OnShown">
    <BsModalDialog Centered="Centered"
                   Scrollable="Scrollable"
                   Size="Size"
                   Fullscreen="Fullscreen">
        <ModalHeader>
            @ModalHeader
        </ModalHeader>
        <ChildContent>
            @ChildContent
        </ChildContent>
        <ModalFooter>
            @ModalFooter
        </ModalFooter>
    </BsModalDialog>
    </BsModalRoot>
@code {
    private BsModalRoot _modalRoot = default!;

    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public bool Fade { get; set; } = true;

    [Parameter]
    public bool Keyboard { get; set; } = true;

    [Parameter]
    public bool Scrollable { get; set; } = false;

    [Parameter]
    public bool Centered { get; set; } = false;

    [Parameter]
    public BsModalBackdrop Backdrop { get; set; } = BsModalBackdrop.True;

    [Parameter]
    public BsModalSize Size { get; set; } = BsModalSize.Default;

    [Parameter]
    public BsModalFullscreen Fullscreen { get; set; } = BsModalFullscreen.Never;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public RenderFragment? ModalHeader { get; set; }

    [Parameter]
    public RenderFragment? ModalFooter { get; set; }

    [Parameter]
    public EventCallback OnHide { get; set; }

    [Parameter]
    public EventCallback OnHidePrevented { get; set; }

    [Parameter]
    public EventCallback OnHidden { get; set; }

    [Parameter]
    public EventCallback OnShow { get; set; }

    [Parameter]
    public EventCallback OnShown { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AdditionalAttributes { get; set; } = new();
    public async Task Show() => await _modalRoot.Show();
    public async Task Hide() => await _modalRoot.Hide();
    public async Task Toggle() => await _modalRoot.Toggle();
    public async Task HandleUpdate() => await _modalRoot.HandleUpdate();
}
