@namespace BsBlazor
@inject IModalService ModalService
@if (ConcreteModalService != null)
{
    foreach (var modalReference in ConcreteModalService.ModalReferences)
    {
        BsModalRoot? currentRef = null;
        <BsModalRoot @key="modalReference"
                     @ref="currentRef"
                     ShowWhenRendered
                     OnHidden="modalReference.InvokHidden">
            @{ modalReference.Initialize(currentRef!); }
            <CascadingValue TValue="IModalReference" IsFixed Value="modalReference">
                <DynamicComponent Type="modalReference.DialogType" />
               @*  @if (typeof(IModalReference<>).IsAssignableFrom(modalReference))
                {

                }
                else
                {
                    <DynamicComponent Type="modalReference.DialogType" />
                } *@
            </CascadingValue>
        </BsModalRoot>
    }
}
@code {
    private ModalService? ConcreteModalService => ModalService as ModalService;
    protected override void OnInitialized()
    {
        if (ConcreteModalService == null) { return; }
        ConcreteModalService.OnModalAdded += (modalReference) => StateHasChanged();
        ConcreteModalService.OnModalRemoved += (modalReference) => StateHasChanged();
    }
}
